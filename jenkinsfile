pipeline {
    agent {
        kubernetes {
            label 'build-node'
            defaultContainer 'jnlp'
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: docker
    image: docker:19.03.12
    command:
    - cat
    tty: true
    volumeMounts:
    - name: docker-sock
      mountPath: /var/run/docker.sock
  volumes:
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
"""
        }
    }

    environment {
        DOCKER_REGISTRY = "10.42.0.175:5000" // Replace with your local registry address
        IMAGE_NAME = "nodejs-app"         // Name of your Docker image
    }

    stages {
        stage('Clone Repository') {
            steps {
                echo 'Cloning the Node.js application from GitHub...'
                git branch: 'dev',
                    url: 'https://github.com/steadxcz/mirrorControllerBack.git'
            }
        }

        stage('Install Node.js and Git') {
            steps {
                container('docker') {
                    sh '''
                        apk add --no-cache nodejs npm git
                    '''
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                container('docker') {
                    echo 'Installing Node.js dependencies...'
                    sh 'npm install' // Ensure npm is installed in your environment
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                container('docker') {
                    echo 'Building the Docker image...'
                    sh '''
                    docker build -t $DOCKER_REGISTRY/$IMAGE_NAME:latest .
                    '''
                }
            }
        }

        stage('Push to Local Registry') {
            steps {
                container('docker') {
                    echo 'Pushing the Docker image to the local registry...'
                    sh '''
                    docker push $DOCKER_REGISTRY/$IMAGE_NAME:latest
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution completed.'
        }
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check the logs for details.'
        }
    }
}